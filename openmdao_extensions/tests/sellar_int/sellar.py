"""
  sellar.py generated by WhatsOpt 1.25.1
"""
from optparse import OptionParser
import openmdao.api as om

# from openmdao_extensions.reckless_nonlinear_block_gs import RecklessNonlinearBlockGS
from .sellar_base import SellarBase, SellarFactoryBase


class SellarFactory(SellarFactoryBase):
    """A factory to create disciplines of Sellar analysis."""

    # One can override here create methods from the base class to take control over disciplines creation
    # then pass an instance of this class as the 'factory' argument of the constructor (see run_*.py scripts),
    # example: my_analysis = Sellar(factory=SellarFactory())


class Sellar(SellarBase):
    """An OpenMDAO Group to encapsulate Sellar analysis
    see https://openmdao.org/newdocs/versions/latest/features/core_features/working_with_groups/main.html
    """

    # One can override here default behaviour provided by WhatsOpt in the base class.

    # def initialize():
    #     super().initialize()
    # Here one can adjust component initialization

    # Example adding options
    # see https://openmdao.org/newdocs/versions/latest/features/core_features/working_with_components/options.html
    #
    #     self.options.declare("n_engines", types=int)

    # Example of manual solver adjusments (imports should be adjusted accordingly)
    # see https://openmdao.org/newdocs/versions/latest/features/core_features/controlling_solver_behavior/main.html
    #
    #     self.nonlinear_solver = NewtonSolver()
    #     self.nonlinear_solver.options['maxiter'] = 20
    #     self.linear_solver = DirectSolver()

    # def setup(self):
    #     super().setup()
    #
    # As an example, here if needs be, one can add code to adjust
    # setup (done in parent base class) regarding options defined in initialize


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option(
        "-n",
        "--no-n2",
        action="store_false",
        dest="n2_view",
        help="display N2 openmdao viewer",
    )
    (options, args) = parser.parse_args()

    problem = om.Problem()
    problem.model = Sellar()

    problem.setup()
    problem.final_setup()

    if options.n2_view:
        from openmdao.visualization.n2_viewer.n2_viewer import n2

        n2(problem)
