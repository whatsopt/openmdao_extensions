"""
  sellar_base.py generated by WhatsOpt 1.25.1
"""
# DO NOT EDIT unless you know what you are doing
# whatsopt_url: http://localhost:3000
# analysis_id: 4


import numpy as np
from numpy import nan, inf

import openmdao.api as om
from openmdao.api import NonlinearBlockGS
from openmdao.api import ScipyKrylov
from openmdao import __version__ as OPENMDAO_VERSION


from .disc1 import Disc1
from .disc2 import Disc2
from .functions import Functions


class SellarFactoryBase:
    """
    A factory for all plain disciplines of Sellar analysis.

    One can override methods in a subclass to take control over disciplines creation
    and pass that subclass to the analysis constructor as a factory argument.
    """

    def create_disc1(self):
        return Disc1()

    def create_disc2(self):
        return Disc2()

    def create_functions(self):
        return Functions()


class SellarBase(om.Group):
    """An OpenMDAO base component to encapsulate Sellar MDA"""

    def initialize(self):
        self.options.declare(
            "factory", default=SellarFactoryBase(), types=object, recordable=False
        )

        self.nonlinear_solver = NonlinearBlockGS()
        self.nonlinear_solver.options["atol"] = 1.0e-08
        self.nonlinear_solver.options["rtol"] = 1.0e-08
        self.nonlinear_solver.options["err_on_non_converge"] = False
        self.nonlinear_solver.options["maxiter"] = 10
        self.nonlinear_solver.options["iprint"] = 1

        self.linear_solver = ScipyKrylov()
        self.linear_solver.options["atol"] = 1.0e-08
        self.linear_solver.options["rtol"] = 1.0e-08
        self.linear_solver.options["err_on_non_converge"] = True
        self.linear_solver.options["maxiter"] = 10

        self.linear_solver.options["iprint"] = 1

    def setup(self):
        self.set_input_defaults("x", val=2)
        self.set_input_defaults("z", val=[5, 2])
        self.add_subsystem(
            "disc1", self.create_disc1(), promotes=["x", "y1", "y2", "z"]
        )
        self.add_subsystem("disc2", self.create_disc2(), promotes=["y1", "y2", "z"])
        self.add_subsystem(
            "functions",
            self.create_functions(),
            promotes=["f", "g1", "g2", "x", "y1", "y2", "z"],
        )

    def create_disc1(self):
        return self.options["factory"].create_disc1()

    def create_disc2(self):
        return self.options["factory"].create_disc2()

    def create_functions(self):
        return self.options["factory"].create_functions()
